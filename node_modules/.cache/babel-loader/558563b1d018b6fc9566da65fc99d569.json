{"ast":null,"code":"var _jsxFileName = \"/Users/kenzieshimrock/Projects/kenzie-shimrock-fe-takehome/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { createStore } from 'redux'; // let store = createStore(reducer);\n///STORE (globalized state) holds all data or state for the application\n/// ACTION INCREMENT -> function that returns an object\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst increment = () => {\n  return {\n    type: 'INCREMENT'\n  };\n};\n\nconst decrement = () => {\n  return {\n    type: 'DECREMENT'\n  };\n}; /// REDUCER (how your actions transform your state to next state)\n/// parameter 1: initial state\n/// parameter 2: action\n\n\nconst counter = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case increment:\n      return state + 1;\n\n    case decrement:\n      return state - 1;\n\n    default:\n      return null;\n  }\n};\n\nlet store = createStore(counter); /// Display in console\n\nstore.subscribe(() => console.log(store.getState())); /// DISPATCH -> how we execute this action via reducer\n\nstore.dispatch(increment);\nReactDOM.render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 54,\n  columnNumber: 3\n}, this), document.getElementById('root')); // If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nreportWebVitals();","map":{"version":3,"sources":["/Users/kenzieshimrock/Projects/kenzie-shimrock-fe-takehome/src/index.js"],"names":["React","ReactDOM","App","reportWebVitals","createStore","increment","type","decrement","counter","state","action","store","subscribe","console","log","getState","dispatch","render","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,SAASC,WAAT,QAA4B,OAA5B,C,CAKA;AACA;AAIA;;;;AACA,MAAMC,SAAS,GAAG,MAAM;AACtB,SAAO;AACLC,IAAAA,IAAI,EAAE;AADD,GAAP;AAGD,CAJD;;AAMA,MAAMC,SAAS,GAAG,MAAM;AACtB,SAAO;AACLD,IAAAA,IAAI,EAAE;AADD,GAAP;AAGD,CAJD,C,CAMA;AACA;AACA;;;AACA,MAAME,OAAO,GAAG,YAAuB;AAAA,MAAtBC,KAAsB,uEAAd,CAAc;AAAA,MAAXC,MAAW;;AACrC,UAAOA,MAAM,CAACJ,IAAd;AACE,SAAKD,SAAL;AACE,aAAOI,KAAK,GAAG,CAAf;;AACF,SAAKF,SAAL;AACE,aAAOE,KAAK,GAAG,CAAf;;AACF;AACE,aAAO,IAAP;AANJ;AAQD,CATD;;AAWA,IAAIE,KAAK,GAAGP,WAAW,CAACI,OAAD,CAAvB,C,CAGA;;AACAG,KAAK,CAACC,SAAN,CAAgB,MAAMC,OAAO,CAACC,GAAR,CAAYH,KAAK,CAACI,QAAN,EAAZ,CAAtB,E,CAEA;;AAEAJ,KAAK,CAACK,QAAN,CAAeX,SAAf;AAEAJ,QAAQ,CAACgB,MAAT,eACE,QAAC,KAAD,CAAO,UAAP;AAAA,yBACE,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,QADF,EAIEC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAJF,E,CAOA;AACA;AACA;;AACAhB,eAAe","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { createStore } from 'redux';\n\n\n\n\n// let store = createStore(reducer);\n///STORE (globalized state) holds all data or state for the application\n\n\n\n/// ACTION INCREMENT -> function that returns an object\nconst increment = () => {\n  return {\n    type: 'INCREMENT'\n  }\n}\n\nconst decrement = () => {\n  return {\n    type: 'DECREMENT'\n  }\n}\n\n/// REDUCER (how your actions transform your state to next state)\n/// parameter 1: initial state\n/// parameter 2: action\nconst counter = (state = 0, action) => {\n  switch(action.type) {\n    case increment: \n      return state + 1;\n    case decrement: \n      return state - 1;\n    default:\n      return null;\n  }\n}\n\nlet store = createStore(counter);\n\n\n/// Display in console\nstore.subscribe(() => console.log(store.getState()));\n\n/// DISPATCH -> how we execute this action via reducer\n\nstore.dispatch(increment);\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"]},"metadata":{},"sourceType":"module"}